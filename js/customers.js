document.addEventListener("DOMContentLoaded", () => {
    const listEl = document.getElementById("customerList");
    const searchEl = document.getElementById("searchInput");

    const detailDialog = document.getElementById("customerDetail");
    const custNameEl = document.getElementById("custName");
    const custPhoneEl = document.getElementById("custPhone");
    const custAddressEl = document.getElementById("custAddress");
    const loanListEl = document.getElementById("loanList");
    const closeDetailBtn = document.getElementById("closeDetail");

    const confirmDialog = document.getElementById("confirmDelete");
    const confirmDeleteBtn = document.getElementById("confirmDeleteBtn");
    const cancelDeleteBtn = document.getElementById("cancelDelete");

    let customers = [];
    let selectedId = null;

    /* ===========================
       ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
    =========================== */

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    function loadCustomers() {
        if (typeof getAllCustomers === "function") {
            customers = getAllCustomers();
        } else {
            customers = [];
        }
        renderCustomers(customers);
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    function renderCustomers(data) {
        if (!data.length) {
            listEl.innerHTML = `<p class="empty-text">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</p>`;
            return;
        }

        listEl.innerHTML = "";
        data.forEach((cust) => {
            const div = document.createElement("div");
            div.className = "customer-card";
            div.innerHTML = `
        <div class="cust-info">
          <h3>${cust.name}</h3>
          <p>${cust.phone || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå"}</p>
          <p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤: <strong>${cust.loans?.length || 0}</strong></p>
        </div>
        <div class="cust-actions">
          <button class="small-btn info" data-id="${cust.id}" data-action="view">‡∏î‡∏π</button>
          <button class="small-btn danger" data-id="${cust.id}" data-action="delete">‡∏•‡∏ö</button>
        </div>
      `;
            listEl.appendChild(div);
        });
    }

    // ‡πÅ‡∏õ‡∏• period ‡πÑ‡∏ó‡∏¢
    function getPeriodLabel(period) {
        switch (period) {
            case "day": return "‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô";
            case "week": return "‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå";
            case "month": return "‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô";
            case "year": return "‡∏ï‡πà‡∏≠‡∏õ‡∏µ";
            default: return period;
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô confirm ‡πÅ‡∏ö‡∏ö custom dialog
    function confirmAction(message, onConfirm) {
        const overlay = document.createElement("div");
        overlay.className = "dialog";
        overlay.innerHTML = `
      <div class="dialog-box">
        <h3>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</h3>
        <p>${message}</p>
        <div class="dialog-buttons">
          <button class="secondary">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
          <button class="danger">‡∏ï‡∏Å‡∏•‡∏á</button>
        </div>
      </div>
    `;
        document.body.appendChild(overlay);
        overlay.querySelector(".secondary").onclick = () => overlay.remove();
        overlay.querySelector(".danger").onclick = () => {
            overlay.remove();
            onConfirm();
        };
    }

    /* ===========================
       ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ / ‡∏î‡∏π / ‡∏•‡∏ö
    =========================== */

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    searchEl.addEventListener("input", (e) => {
        const keyword = e.target.value.trim().toLowerCase();
        const filtered = customers.filter(
            (c) =>
                c.name.toLowerCase().includes(keyword) ||
                (c.phone && c.phone.includes(keyword))
        );
        renderCustomers(filtered);
    });

    // ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π / ‡∏•‡∏ö ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    listEl.addEventListener("click", (e) => {
        const btn = e.target.closest("button");
        if (!btn) return;
        const id = btn.dataset.id;
        const action = btn.dataset.action;

        if (action === "view") showDetail(id);
        if (action === "delete") confirmDelete(id);
    });

    /* ===========================
       ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    =========================== */

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà .00
    function formatNumber(num) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏õ‡πä‡∏∞ ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
        if (Number.isInteger(num)) return num.toLocaleString();
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏®‡∏© ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        return num.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 });
    }

    function showDetail(id) {
        const cust = customers.find((c) => c.id === id);
        if (!cust) return;

        custNameEl.textContent = `‡∏ä‡∏∑‡πà‡∏≠: ${cust.name}`;
        custPhoneEl.textContent = `‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${cust.phone || "-"}`;
        custAddressEl.textContent = `‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${cust.address || "-"}`;

        loanListEl.innerHTML = cust.loans?.length
            ? cust.loans.map((loan) => renderLoanCard(cust.id, loan)).join("")
            : `<p class="empty-text">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤</p>`;

        detailDialog.classList.remove("hidden");
    }

    // render loan card
    function renderLoanCard(custId, loan) {
        const schedule = loan.table || [];
        let paidCount = 0;
        let paidSum = 0;
        let remainSum = 0;
        let rows = "";

        schedule.forEach((row, i) => {
            const paid = loan.paid?.[i] || false;
            const trClass = paid ? "paid-row" : "";
            if (paid) paidCount++;
            paidSum += paid ? row.total : 0;
            remainSum += paid ? 0 : row.total;

            rows += `
        <tr class="${trClass}">
          <td>${i + 1}</td>
          <td>${row.dueDate}</td>
         <td>${formatNumber(row.principal)}</td>
         <td>${formatNumber(row.interest)}</td>
         <td>${formatNumber(row.total)}</td>

          <td><input type="checkbox" data-cust="${custId}" data-loan="${loan.id}" data-term="${i}" ${paid ? "checked" : ""}></td>
        </tr>`;
        });

        const summary = `
      <div class="loan-summary">
        <p>‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß: ${paidCount}/${schedule.length} ‡∏á‡∏ß‡∏î</p>
        <p>‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß: ${paidSum.toFixed(2)} ‡∏ö‡∏≤‡∏ó</p>
        <p>‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${remainSum.toFixed(2)} ‡∏ö‡∏≤‡∏ó</p>
      </div>`;

        return `
      <div class="loan-card">
        <div class="loan-header">
          <p><strong>‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ:</strong> ${loan.amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
          <p><strong>‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢:</strong> ${loan.rate}% (${getPeriodLabel(loan.period)})</p>
          <p><strong>‡∏á‡∏ß‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</strong> ${loan.term}</p>
          <p><strong>‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</strong> ${loan.startDate}</p>
          <button class="small-btn danger" data-cust="${custId}" data-loan="${loan.id}" data-action="delete-loan">üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ô‡∏µ‡πâ</button>
        </div>

        <table class="loan-table">
          <thead>
            <tr>
              <th>‡∏á‡∏ß‡∏î</th>
              <th>‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î</th>
              <th>‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏ô</th>
              <th>‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢</th>
              <th>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</th>
              <th>‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß</th>
            </tr>
          </thead>
          <tbody>${rows}</tbody>
        </table>
        ${summary}
      </div>`;
    }

    /* ===========================
       ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡πä‡∏Å‡∏á‡∏ß‡∏î + ‡∏•‡∏ö loan
    =========================== */

    // ‡∏ï‡∏¥‡πä‡∏Å‡∏á‡∏ß‡∏î
    loanListEl.addEventListener("change", (e) => {
        const chk = e.target;
        if (chk.type !== "checkbox") return;

        const custId = chk.dataset.cust;
        const loanId = chk.dataset.loan;
        const termIndex = parseInt(chk.dataset.term);
        const paid = chk.checked;

        confirmAction(
            paid
                ? "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"
                : "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
            () => {
                if (typeof updatePayment === "function") {
                    updatePayment(custId, loanId, termIndex, paid);
                }
                customers = getAllCustomers();
                showDetail(custId);
            }
        );
    });

    // ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ loan
    loanListEl.addEventListener("click", (e) => {
        const btn = e.target.closest("button");
        if (!btn) return;
        if (btn.dataset.action === "delete-loan") {
            const custId = btn.dataset.cust;
            const loanId = btn.dataset.loan;
            confirmAction(
                "‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏•‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ô‡∏µ‡πâ? ‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£!",
                () => {
                    if (typeof deleteLoan === "function") {
                        deleteLoan(custId, loanId);
                    }
                    customers = getAllCustomers();
                    showDetail(custId);
                }
            );
        }
    });

    /* ===========================
       Dialog ‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏ô
    =========================== */
    closeDetailBtn.addEventListener("click", () =>
        detailDialog.classList.add("hidden")
    );

    confirmDeleteBtn.addEventListener("click", () => {
        if (typeof deleteCustomer === "function") {
            deleteCustomer(selectedId);
        }
        customers = customers.filter((c) => c.id !== selectedId);
        renderCustomers(customers);
        confirmDialog.classList.add("hidden");
    });

    cancelDeleteBtn.addEventListener("click", () =>
        confirmDialog.classList.add("hidden")
    );

    function confirmDelete(id) {
        selectedId = id;
        confirmDialog.classList.remove("hidden");
    }

    loadCustomers();
});
